using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PreludeEngine
{
    class StopWords
    {
        private List<string> all = null;

        public StopWords()
        {
            this.all = getAll();
        }

        public List<string> getAll()
        {
            List<string> a = new List<string>();
            a.Add("a");
            a.Add("about");
            a.Add("above");
            a.Add("after");
            a.Add("again");
            a.Add("against");
            a.Add("all");
            a.Add("am");
            a.Add("an");
            a.Add("and");
            a.Add("any");
            a.Add("are");
            a.Add("aren't");
            a.Add("as");
            a.Add("at");
            a.Add("be");
            a.Add("because");
            a.Add("been");
            a.Add("before");
            a.Add("being");
            a.Add("below");
            a.Add("between");
            a.Add("both");
            a.Add("but");
            a.Add("by");
            a.Add("can't");
            a.Add("cannot");
            a.Add("could");
            a.Add("couldn't");
            a.Add("did");
            a.Add("didn't");
            a.Add("do");
            a.Add("does");
            a.Add("doesn't");
            a.Add("doing");
            a.Add("don't");
            a.Add("down");
            a.Add("during");
            a.Add("each");
            a.Add("few");
            a.Add("for");
            a.Add("from");
            a.Add("further");
            a.Add("had");
            a.Add("hadn't");
            a.Add("has");
            a.Add("hasn't");
            a.Add("have");
            a.Add("haven't");
            a.Add("having");
            a.Add("he");
            a.Add("he'd");
            a.Add("he'll");
            a.Add("he's");
            a.Add("her");
            a.Add("here");
            a.Add("here's");
            a.Add("hers");
            a.Add("herself");
            a.Add("him");
            a.Add("himself");
            a.Add("his");
            a.Add("how");
            a.Add("how's");
            a.Add("i");
            a.Add("i'd");
            a.Add("i'll");
            a.Add("i'm");
            a.Add("i've");
            a.Add("if");
            a.Add("in");
            a.Add("into");
            a.Add("is");
            a.Add("isn't");
            a.Add("it");
            a.Add("it's");
            a.Add("its");
            a.Add("itself");
            a.Add("let's");
            a.Add("me");
            a.Add("more");
            a.Add("most");
            a.Add("mustn't");
            a.Add("my");
            a.Add("myself");
            a.Add("no");
            a.Add("nor");
            a.Add("not");
            a.Add("of");
            a.Add("off");
            a.Add("on");
            a.Add("once");
            a.Add("only");
            a.Add("or");
            a.Add("other");
            a.Add("ought");
            a.Add("our");
            a.Add("ours");
            a.Add("ourselves");
            a.Add("out");
            a.Add("over");
            a.Add("own");
            a.Add("same");
            a.Add("shan't");
            a.Add("she");
            a.Add("she'd");
            a.Add("she'll");
            a.Add("she's");
            a.Add("should");
            a.Add("shouldn't");
            a.Add("so");
            a.Add("some");
            a.Add("such");
            a.Add("than");
            a.Add("that");
            a.Add("that's");
            a.Add("the");
            a.Add("their");
            a.Add("theirs");
            a.Add("them");
            a.Add("themsel");
            a.Add("then");
            a.Add("there");
            a.Add("there's");
            a.Add("these");
            a.Add("they");
            a.Add("they'd");
            a.Add("they'll");
            a.Add("they're");
            a.Add("they've");
            a.Add("this");
            a.Add("those");
            a.Add("through");
            a.Add("to");
            a.Add("too");
            a.Add("under");
            a.Add("until");
            a.Add("up");
            a.Add("very");
            a.Add("was");
            a.Add("wasn't");
            a.Add("we");
            a.Add("we'd");
            a.Add("we'll");
            a.Add("we're");
            a.Add("we've");
            a.Add("were");
            a.Add("weren't");
            a.Add("what");
            a.Add("what's");
            a.Add("when");
            a.Add("when's");
            a.Add("where");
            a.Add("where's");
            a.Add("which");
            a.Add("while");
            a.Add("who");
            a.Add("who's");
            a.Add("whom");
            a.Add("why");
            a.Add("why's");
            a.Add("with");
            a.Add("won't");
            a.Add("would");
            a.Add("wouldn't");
            a.Add("you");
            a.Add("you'd");
            a.Add("you'll");
            a.Add("you're");
            a.Add("you've");
            a.Add("your");
            a.Add("yours");
            a.Add("yourself");
            a.Add("yourselves");

            a.Add("girlflower");
            a.Add("prelude");
            return a;
        
        }
    }
}
